version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.    
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=`curl -H "token: c1b1e3ca-9ad3-4e51-a6ba-8693a7450b4e" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}`
            if [[ $SUCCESS == "Migration Successful" ]];
            then
              echo "REVERTING THE MIGRATIONS"
              cd backend
              npm install
              npm run migrations:revert
            else
              echo "NO REVERT REQUIRED"
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd ./frontend

            echo "INSTALLING NPM MODULE DEPENDENCIES"
            npm i

            echo "BUILDING THE FRONTEND APPLICATION"
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd ./backend

            echo "INSTALLING NPM MODULE DEPENDENCIES"
            npm i

            echo "BUILDING THE BACKEND APPLICATION"
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd ./frontend

            echo "INSTALLING DEPENDENCIES"
            sudo npm install oauth-sign

            echo "RUNNING TEST SUITE"
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test back-end
          command: |
            cd ./backend

            echo "RUNNING TEST SUITE"
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Analyse front-end
          command: |
            cd ./frontend

            echo "INSTALL NODE_MODULE DEPENDENCIES"
            npm i

            echo "RUNNING FRONTEND SECURITY VULNERABILITY SCAN"
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Analyse back-end
          command: |
            cd ./backend

            echo "INSTALL NODE_MODULE DEPENDENCIES"
            npm i

            echo "RUNNING BACKEND SECURITY VULNERABILITY SCAN"
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yaml \
              --tags project=udapeople-backend_${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yaml \
              --tags project=udapeople-frontend_${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "RETRIEVING THE IP ADDRESS OF THE BACKEND EC2 INSTANCE"
            workflowidip=$(echo "aws ec2 describe-instances --filters 'Name=tag:project,Values=udapeople-backend_${CIRCLE_WORKFLOW_ID:0:7}' \
              --query 'Reservations[*].Instances[*].PublicIpAddress' --output text")
            echo $workflowidip > backendip.sh; chmod 755 backendip.sh
            echo "POPULATING ANSIBLE INVENTORY FOR FUTURE SERVER CONFIGURATIONS STEPS"
            ./backendip.sh >> .circleci/ansible/inventory.txt
            backendip=$(./backendip.sh)
            echo "STORING THE IP ADDRESS OF THE BACKEND EC2 INSTANCE IN MEMSTASH FOR LATER USE"
            curl -H "Content-Type: text/plain" -H "token: c1b1e3ca-9ad3-4e51-a6ba-8693a7450b4e" --request PUT --data "$backendip" \
              https://api.memstash.io/values/backendip_${CIRCLE_WORKFLOW_ID:0:7}
            
            echo "RETRIEVING THE PUBLIC DNS NAME OF THE BACKEND EC2 INSTANCE"
            workflowiddns=$(echo "aws ec2 describe-instances --filters 'Name=tag:project,Values="udapeople-backend_${CIRCLE_WORKFLOW_ID:0:7}"' \
              --query 'Reservations[*].Instances[*].PublicDnsName' --output text")
            echo $workflowiddns > backenddns.sh; chmod 755 backenddns.sh
            backenddnsurl=$(./backenddns.sh)
            echo "STORING THE PUBLIC DNS NAME OF THE BACKEND EC2 INSTANCE IN MEMSTASH FOR LATER USE"
            curl -H "Content-Type: text/plain" -H "token: c1b1e3ca-9ad3-4e51-a6ba-8693a7450b4e" --request PUT --data "$backenddnsurl" \
              https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID:0:7}
      - persist_to_workspace:
          root: .circleci
          paths:
            - ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.12
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 5d:12:10:23:b7:ec:70:76:d3:c7:fb:bc:2d:52:e5:f7
            - 46:01:4e:c2:a1:b4:af:39:9c:29:e0:be:fb:45:17:b2
            - 09:33:6d:86:bf:00:e8:2e:dc:c0:a6:bd:b7:69:f4:ab
            - dd:00:e1:26:5b:07:6b:63:d1:bd:a6:5a:89:77:78:72


            
            


            
      - attach_workspace:
          at: /tmp
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            ansible-playbook -i /tmp/ansible/inventory.txt .circleci/ansible/configure-server.yaml
      - destroy-environment      
     
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            echo "BUILDING THE BACKEND ENVIRONMENT FILE FOR POSTGRES MIGRATIONS"
            echo ENVIROMENT=production > .env
            echo TYPEORM_CONNECTION=postgres >> .env
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> .env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> .env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> .env
            echo TYPEORM_HOST=$TYPEORM_HOST >> .env
            echo TYPEORM_PORT=$TYPEORM_PORT >> .env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env

            echo "INSTALLING NPM MODULE DEPENDENCIES"
            npm i > npminstall.log

            echo "INSTALLING OATH-SIGN PACKAGE"
            npm install oauth-sign >> npminstall.log

            echo "RUNNING POSTGRES DATABASE MIGRATIONS"
            npm run migrations > migration.log
      - run:
            name: Send migration results to memstash
            working_directory: ./backend
            command: |
              if [[ $(grep -i "has been executed successfully" migration.log | wc -l) -ge 1 ]]; then
                echo "SUCCESSFULLY EXECUTED THE DATABASE MIGRATIONS"
                curl -H "Content-Type: text/plain" -H "token: c1b1e3ca-9ad3-4e51-a6ba-8693a7450b4e" --request PUT \
                  --data "Migration successful" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
              else
                echo "FAILED TO RUN THE DATABASE MIGRATIONS"
                curl -H "Content-Type: text/plain" -H "token: c1b1e3ca-9ad3-4e51-a6ba-8693a7450b4e" --request PUT \
                  --data "Migration failed" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
              fi
              echo "STORING THE RESULTS OF THE DATABASE MIGRATIONS IN MEMSTASH FOR LATER EVALUATION"
      - destroy-environment

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            echo "UPDATING THE PACKAGE DATABASE"
            sudo apt-get -y update

            echo "UPGRADING THE PACKAGE DATABASE"
            sudo apt-get -y upgrade

            echo "INSTALLING PYTHON3"
            sudo apt-get -y install python3

            echo "INSTALLING THE AWS CLI FROM AMAZON"
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Deploy frontend objects
          working_directory: ./frontend
          command: |
            export API_URL=$(echo "http://$(curl -H "token: c1b1e3ca-9ad3-4e51-a6ba-8693a7450b4e" --request GET \
              https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID:0:7}):3030")
            
            echo "INSTALLING NPM MODULE DEPENDENCIES"
            npm i

            echo "BUILDING THE APPLICATION"
            npm run build

            echo "DEPLOYING THE FRONT END APPLICATION CODE TO S3"
            bucket=$(echo "udapeople-${CIRCLE_WORKFLOW_ID:0:7}")
            aws s3 sync dist s3://${bucket}/

            echo "STORING THE FRONT END S3 BUCKET URL IN MEMSTASH FOR LATER USE"
            bucketurl="$(echo "http://$bucket.s3-website-us-east-1.amazonaws.com")"
            curl -H "Content-Type: text/plain" -H "token: c1b1e3ca-9ad3-4e51-a6ba-8693a7450b4e" --request PUT \
              --data "$bucketurl" https://api.memstash.io/values/bucketurl
      - destroy-environment
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.12
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 5d:12:10:23:b7:ec:70:76:d3:c7:fb:bc:2d:52:e5:f7
            - 46:01:4e:c2:a1:b4:af:39:9c:29:e0:be:fb:45:17:b2
            - 09:33:6d:86:bf:00:e8:2e:dc:c0:a6:bd:b7:69:f4:ab
            - dd:00:e1:26:5b:07:6b:63:d1:bd:a6:5a:89:77:78:72

            
            
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible tar gzip ansible nodejs npm
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            [[ ! -d backend ]] && mkdir backend
            envfile="backend/.env"
            echo ENVIROMENT=production > $envfile
            echo TYPEORM_CONNECTION=postgres >> $envfile
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> $envfile
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> $envfile
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> $envfile
            echo TYPEORM_HOST=$TYPEORM_HOST >> $envfile
            echo TYPEORM_PORT=$TYPEORM_PORT >> $envfile
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> $envfile
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> $envfile
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> $envfile
            tar -cvf backend.tar backend
            
            echo "DEPLOYING THE APPLICATION BACKEND"
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i ansible/inventory.txt .circleci/ansible/deploy-backend.yaml
      - destroy-environment

  smoke-test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get upgrade
            sudo apt-get -y install less curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Backend smoke test.
          command: |
            echo "RUNNING A BACKEND SMOKE TEST"
            BACKEND_URL="http://$(curl -H "token: c1b1e3ca-9ad3-4e51-a6ba-8693a7450b4e" --request GET \
              https://api.memstash.io/values/backendip_${CIRCLE_WORKFLOW_ID:0:7} | head -1):3030"
            echo $BACKEND_URL
            echo $BACKEND_IP
            curl "$BACKEND_URL/api/status"
      - run:
          name: Frontend smoke test.
          command: |
            echo "RUNNING A FRONTEND SMOKE TEST"
            export bucketurl=$(curl -H "token: c1b1e3ca-9ad3-4e51-a6ba-8693a7450b4e" --request GET https://api.memstash.io/values/bucketurl)
            if curl -s ${bucketurl} | grep "Welcome"
            then
              echo "FRONTEND SMOKE TEST SUCCESS"
            else
              echo "FRONTEND SMOKE TEST FAIL"
              exit 1
            fi
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            echo "IDENTIFYING OLD WORKFLOW ID FROM EXISTING CLOUDFORMATION EXPORTS"
            oldworkflowid=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)

            echo "STORING OLD WORKFLOW ID IN MEMSTASH SO WE CAN CLEANUP THE OLD INFRA AFTER BLUE/GREEN DEPLOYMENT"
            curl -H "Content-Type: text/plain" -H "token: c1b1e3ca-9ad3-4e51-a6ba-8693a7450b4e" --request PUT \
              --data "$oldworkflowid" https://api.memstash.io/values/oldworkflowid_${CIRCLE_WORKFLOW_ID:0:7}

            echo "DEPLOYING THE CLOUDFRONT STACK AS NEW"
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yaml \
            --region ${AWS_DEFAULT_REGION} \
            --stack-name "UdacityNDP3UdaPeople" \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Remove old stacks and files
          command: |
            echo "RETRIEVING OLD WORKFLOW ID FROM MEMSTASH"
            export OldWorkflowID=$(curl -H "token: c1b1e3ca-9ad3-4e51-a6ba-8693a7450b4e" \
              --request GET https://api.memstash.io/values/oldworkflowid_${CIRCLE_WORKFLOW_ID:0:7})
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text))

            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              echo "DELETING THE OLD STACKS AND S3 BUCKET (BLUE/GREEN DEPLOY)"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name udapeople-backend-${OldWorkflowID}
              aws cloudformation delete-stack --stack-name udapeople-frontend-${OldWorkflowID}
            fi
          
            echo "CLEANUP COMPLETE"

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [scan-frontend, scan-backend, test-backend, test-frontend]
          filters:
            branches:
              only:
                - main
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [deploy-frontend]
      - smoke-test:
          requires: [deploy-frontend, deploy-backend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
